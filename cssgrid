grid container
    Element containing a grid, defined by setting
    `
        display: grid; 
    `

grid item
    Element that is a direct descendant of the grid container
    `
        <div id="container" >
            any first level element => grid item
                *children don't count*
        </div>
    `

grid line
    Lines that seperate the grid into sections
        Horizontal => row
        Vertical => column
    Lines are numbered by default starting at 1 and increment
        (0,0) of the screen = {
            row: 1,
            column:1,
        }

grid cell
    The intersection between a grid row and a grid column.
        "Table cell"

grid track
    A "row" or "column"

grid area
    defined rectanglar area between four specified grid lines 
        (top left, top right, bottom right, bottom left)

grid gap
    Empty space between grid tracks
        "gutter"
        
grid template areas
    Applied to ANY grid container
    Uses text-based grid map to apply grid area names to invididual cells
        declare by grid-template-areas:
            (depending on how many columns and rows)
                " title title title "
                " main header header "
                " main sidebar footer ";
            creates a text based map of your layout
            insert by
                `
                    .class {
                        grid-area: title;
                    }
                ` etc.
    
    `

```
    RWD since 2010 => We are showing different versions all the time
        What's wrong with showing a mobile version on desktop? NOTHING, still looks great
            <b> Forcing sites to look the same across all browsers is a bad habit </b>
                Make thing look the best they can in what they are rendered in
                *CAVEAT*: This only works with mobile out methodology
```

feature queries
    Test for grid support in current browser
    `
        @supports (display: grid) {
            if it doesnt => show mobile version
        }
    `

WHY DOES THIS MATTER?
    GLAD YOU ASKED SCOTT
        1. Making a text-based layout makes it easier for you to plop content into their pre-defined spot
        2. No more floating, bloating and bad practice shit in your HTML / CSS code
        3. Responsive as FUCK
            Just use media queries to restructure your grid rows and columns
            re-define your grid template areas based on sizing
            PROFIT!!!

RWD Techniques
    1. Build accessible mobile-first 
    2. At the appropriate breakpoints, create layout with grid and grid areas
    3. Use @supports to detect grid support
    4. Use mobile-first layout as fallback for all browsers if grid is not supported
    5. Explore new layouts as viewport widens
